// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using permaAPI.Data.Contexts;

#nullable disable

namespace permaAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240302233126_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationElementLine", b =>
                {
                    b.Property<int>("ElementId")
                        .HasColumnType("int");

                    b.Property<string>("LineId")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ElementId", "LineId");

                    b.HasIndex("LineId");

                    b.ToTable("ApplicationElementLine", (string)null);
                });

            modelBuilder.Entity("ApplicationSectionApplicationType", b =>
                {
                    b.Property<int>("ApplicationSectionId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationSectionId", "ApplicationTypeId");

                    b.HasIndex("ApplicationTypeId");

                    b.ToTable("ApplicationSectionApplicationType");
                });

            modelBuilder.Entity("ApplicationSectionElementLineofCoverage", b =>
                {
                    b.Property<int>("ElementId")
                        .HasColumnType("int");

                    b.Property<string>("LineId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ElementId", "LineId");

                    b.ToTable("ApplicationSectionElementLineofCoverage");
                });

            modelBuilder.Entity("ApplicationSectionLineofCoverage", b =>
                {
                    b.Property<int>("ApplicationSectionId")
                        .HasColumnType("int");

                    b.Property<string>("LineofCoverage")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationSectionId", "LineofCoverage");

                    b.ToTable("ApplicationSectionLineofCoverage");
                });

            modelBuilder.Entity("ApplicationSectionLinesofCoverage", b =>
                {
                    b.Property<int>("ApplicationSectionId")
                        .HasColumnType("int");

                    b.Property<string>("LineofCoverage")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ApplicationSectionId", "LineofCoverage");

                    b.HasIndex("LineofCoverage");

                    b.ToTable("ApplicationSectionLinesofCoverage", (string)null);
                });

            modelBuilder.Entity("Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactID"));

                    b.Property<string>("ContactType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Jobtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPrimaryContact")
                        .HasColumnType("bit");

                    b.HasKey("ContactID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ContactPermissionType", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("ContactId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ContactPermissionType");
                });

            modelBuilder.Entity("InsuredLineofCoverage", b =>
                {
                    b.Property<string>("LineofCoverage")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("LineofCoverage", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("InsuredLineofCoverage", (string)null);
                });

            modelBuilder.Entity("permaAPI.Data.Entities.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ApplicationStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CompletedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CoverageYear")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("previousApplicationId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ApplicationId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationElementLabel", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<int>("ElementId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("ApplicationId", "ElementId");

                    b.ToTable("ApplicationElementLabel");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationElementResponse", b =>
                {
                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("ElementId")
                        .HasColumnType("int");

                    b.Property<int>("RowId")
                        .HasColumnType("int");

                    b.Property<bool?>("BitResponse")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("CurrencyResponse")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<DateTime?>("DateResponse")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("EndTime");

                    b.Property<int?>("IntResponse")
                        .HasColumnType("int");

                    b.Property<string>("LongTextResponse")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("NumRows")
                        .HasColumnType("int")
                        .HasColumnName("numRows");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("StartTime");

                    b.Property<string>("TextResponse")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ApplicationId", "ElementId", "RowId");

                    b.HasIndex("ElementId");

                    b.ToTable("ApplicationElementResponse");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("ApplicationElementResponse_History", "dbo");
                                ttb
                                    .HasPeriodStart("StartTime")
                                    .HasColumnName("StartTime");
                                ttb
                                    .HasPeriodEnd("EndTime")
                                    .HasColumnName("EndTime");
                            }));
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationElementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ElementType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationElementType");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reportId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<string>("ReportAction")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("reportAction");

                    b.Property<string>("ReportDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("reportDescription");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("reportName");

                    b.Property<int>("ReportTypeId")
                        .HasColumnType("int")
                        .HasColumnName("reportTypeId");

                    b.HasKey("ReportId")
                        .HasName("PK__Applicat__1C9B4E2D8713EF7E");

                    b.ToTable("ApplicationReport");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationSection", b =>
                {
                    b.Property<int>("ApplicationSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationSectionId"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("SectionTitle")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("ShowinNavigation")
                        .HasColumnType("bit");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("ApplicationSectionId");

                    b.ToTable("ApplicationSection");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationSectionElement", b =>
                {
                    b.Property<int>("ElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElementId"));

                    b.Property<bool?>("AllowNewRows")
                        .HasColumnType("bit")
                        .HasColumnName("allowNewRows");

                    b.Property<int?>("DecimalPrecision")
                        .HasColumnType("int");

                    b.Property<int?>("ElementType")
                        .HasColumnType("int");

                    b.Property<int?>("ExportCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("exportCategoryId");

                    b.Property<bool?>("HideFromExport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("hideFromExport")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("IndentSpaces")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("indentSpaces")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit")
                        .HasColumnName("isRequired");

                    b.Property<string>("Label")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LongText")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("int")
                        .HasColumnName("maxLength");

                    b.Property<string>("OriginalSource")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("originalSource");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("ShowAllLines")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("showAllLines")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("SourceLabels")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("sourceLabels");

                    b.Property<string>("SourceValues")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("sourceValues");

                    b.Property<bool?>("SumValues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("sumValues")
                        .HasDefaultValueSql("('0')");

                    b.Property<int?>("TableSectionId")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int")
                        .HasColumnName("width");

                    b.HasKey("ElementId");

                    b.ToTable("ApplicationSectionElement");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationSectionResponse", b =>
                {
                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("applicationId");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("sectionId");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("isCompleted");

                    b.HasKey("ApplicationId", "SectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("ApplicationSectionResponse");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationTableDefaultRow", b =>
                {
                    b.Property<int>("ApplicationSectionId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("ApplicationSectionId", "SortOrder")
                        .HasName("PK__Applicat__3AF85DEF09702A07");

                    b.ToTable("ApplicationTableDefaultRow");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationType", b =>
                {
                    b.Property<int>("ApplicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationTypeId"));

                    b.Property<int?>("AdminPermissionId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationType1")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ApplicationType");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notifyemails")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("notifyemails");

                    b.Property<int?>("ReportType")
                        .HasColumnType("int");

                    b.HasKey("ApplicationTypeId");

                    b.ToTable("ApplicationType");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("attachmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<string>("ApplicationUser")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("applicationUser");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("FileDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("fileName");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("memberId");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("modifiedBy");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modifiedDate");

                    b.Property<int>("PolicyPeriod")
                        .HasColumnType("int")
                        .HasColumnName("policyPeriod");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("AttachmentId")
                        .HasName("PK__Attachme__C417BD81BF53B9DE");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.AttachmentCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Attachme__19093A0BEAEAA661");

                    b.ToTable("AttachmentCategory");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ConfigurationSetting", b =>
                {
                    b.Property<string>("ConfigurationKey")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConfigurationValue")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("ConfigurationKey");

                    b.ToTable("ConfigurationSettings");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Address2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AddressType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ContactType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("InsuredId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsBoardMember")
                        .HasColumnType("bit")
                        .HasColumnName("isBoardMember");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsExecutiveCommitteeMember")
                        .HasColumnType("bit")
                        .HasColumnName("isExecutiveCommitteeMember");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MemberType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Salutation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserIdentifier")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("userIdentifier");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ContactId");

                    b.ToTable("contact");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.EmailTemplate", b =>
                {
                    b.Property<string>("Templatetype")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("templatetype");

                    b.Property<string>("EmailSubject")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("emailSubject");

                    b.Property<string>("EmailTemplateBody")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("emailTemplateBody");

                    b.Property<string>("Recipients")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("recipients");

                    b.HasKey("Templatetype");

                    b.ToTable("emailTemplate");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ExportCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExportCategory1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("exportCategory");

                    b.Property<int?>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ExportCategory");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.Insured", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("Address1")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Address2")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Fein")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FEIN");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("date");

                    b.Property<string>("MemberName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MemberNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MemberStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ParentMember")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PrimaryContactId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StateofIncorporation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Website")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MemberId");

                    b.ToTable("Insured");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.InsuredContact", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.HasKey("MemberId", "ContactId");

                    b.ToTable("InsuredContact");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.InsuredNote", b =>
                {
                    b.Property<string>("ApplicationUser")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("applicationUser");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("memberId");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("modifiedBy");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modifiedDate");

                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("noteId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("subject");

                    b.ToTable("InsuredNote");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.LineofCoverage", b =>
                {
                    b.Property<string>("LineofCoverage1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LineofCoverage");

                    b.HasKey("LineofCoverage1");

                    b.ToTable("LineofCoverage");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.NoteCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("categoryTitle");

                    b.HasKey("CategoryId")
                        .HasName("PK__NoteCate__23CAF1D80FD8CA34");

                    b.ToTable("NoteCategory");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.PermissionType", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permissionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("PermissionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("permissionName");

                    b.HasKey("PermissionId");

                    b.ToTable("permissionType");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ReportType", b =>
                {
                    b.Property<int>("ReportType1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reportType");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportType1"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ReportType1")
                        .HasName("PK__ReportTy__4140640A9E722E72");

                    b.ToTable("ReportType");
                });

            modelBuilder.Entity("ApplicationElementLine", b =>
                {
                    b.HasOne("permaAPI.Data.Entities.ApplicationSectionElement", null)
                        .WithMany()
                        .HasForeignKey("ElementId")
                        .IsRequired()
                        .HasConstraintName("FK_elementid");

                    b.HasOne("permaAPI.Data.Entities.LineofCoverage", null)
                        .WithMany()
                        .HasForeignKey("LineId")
                        .IsRequired()
                        .HasConstraintName("FK_lineid");
                });

            modelBuilder.Entity("ApplicationSectionApplicationType", b =>
                {
                    b.HasOne("permaAPI.Data.Entities.ApplicationSection", null)
                        .WithMany()
                        .HasForeignKey("ApplicationSectionId")
                        .IsRequired()
                        .HasConstraintName("FK_sectiontypeid");

                    b.HasOne("permaAPI.Data.Entities.ApplicationType", null)
                        .WithMany()
                        .HasForeignKey("ApplicationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_applicationtypeid");
                });

            modelBuilder.Entity("ApplicationSectionLinesofCoverage", b =>
                {
                    b.HasOne("permaAPI.Data.Entities.ApplicationSection", null)
                        .WithMany()
                        .HasForeignKey("ApplicationSectionId")
                        .IsRequired()
                        .HasConstraintName("FK_appsectionid");

                    b.HasOne("permaAPI.Data.Entities.LineofCoverage", null)
                        .WithMany()
                        .HasForeignKey("LineofCoverage")
                        .IsRequired()
                        .HasConstraintName("FK_lineofcoverage");
                });

            modelBuilder.Entity("ContactPermissionType", b =>
                {
                    b.HasOne("permaAPI.Data.Entities.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("permaAPI.Data.Entities.PermissionType", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InsuredLineofCoverage", b =>
                {
                    b.HasOne("permaAPI.Data.Entities.LineofCoverage", null)
                        .WithMany()
                        .HasForeignKey("LineofCoverage")
                        .IsRequired()
                        .HasConstraintName("FK_1");

                    b.HasOne("permaAPI.Data.Entities.Insured", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_2");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationElementResponse", b =>
                {
                    b.HasOne("permaAPI.Data.Entities.Application", "Application")
                        .WithMany("ApplicationElementResponses")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_applicationid");

                    b.HasOne("permaAPI.Data.Entities.ApplicationSectionElement", "Element")
                        .WithMany("ApplicationElementResponses")
                        .HasForeignKey("ElementId")
                        .IsRequired()
                        .HasConstraintName("FK_element");

                    b.Navigation("Application");

                    b.Navigation("Element");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationSectionResponse", b =>
                {
                    b.HasOne("permaAPI.Data.Entities.Application", "Application")
                        .WithMany("ApplicationSectionResponses")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_sectionapplicationId");

                    b.HasOne("permaAPI.Data.Entities.ApplicationSection", "Section")
                        .WithMany("ApplicationSectionResponses")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FK_sectionid");

                    b.Navigation("Application");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationTableDefaultRow", b =>
                {
                    b.HasOne("permaAPI.Data.Entities.ApplicationSection", "ApplicationSection")
                        .WithMany("ApplicationTableDefaultRows")
                        .HasForeignKey("ApplicationSectionId")
                        .IsRequired()
                        .HasConstraintName("FK_section");

                    b.Navigation("ApplicationSection");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.InsuredContact", b =>
                {
                    b.HasOne("permaAPI.Data.Entities.Contact", "Member")
                        .WithMany("InsuredContacts")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_contactId");

                    b.HasOne("permaAPI.Data.Entities.Insured", "MemberNavigation")
                        .WithMany("InsuredContacts")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_insured");

                    b.Navigation("Member");

                    b.Navigation("MemberNavigation");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.Application", b =>
                {
                    b.Navigation("ApplicationElementResponses");

                    b.Navigation("ApplicationSectionResponses");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationSection", b =>
                {
                    b.Navigation("ApplicationSectionResponses");

                    b.Navigation("ApplicationTableDefaultRows");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.ApplicationSectionElement", b =>
                {
                    b.Navigation("ApplicationElementResponses");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.Contact", b =>
                {
                    b.Navigation("InsuredContacts");
                });

            modelBuilder.Entity("permaAPI.Data.Entities.Insured", b =>
                {
                    b.Navigation("InsuredContacts");
                });
#pragma warning restore 612, 618
        }
    }
}
